{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/textField.js","webpack://gatsby-starter-default/./src/components/calculationResult.js","webpack://gatsby-starter-default/./src/helpers/subsidy.js","webpack://gatsby-starter-default/./src/pages/kalkulator.js"],"names":["title","placeholder","error","value","onChange","className","type","event","target","creditAmount","outstandingDebt","daysOfSubsidisation","isBank","daysPercentage","formatCurrency","calculateSubsidyAmount","useState","setCreditAmount","setOutstandingDebt","setDaysOfSubsidisation","validate","isNaN","Number"],"mappings":"oNAiCA,EA5BkB,SAAC,GAAoD,IAAlDA,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAKrD,OACE,gCACE,uBAAKC,UAAU,SAASL,GACxB,yBACEK,UAAWH,EAAQ,cAAgB,QACnCI,KAAK,OACLL,YAAaA,EACbE,MAAOA,EACPC,SAZkB,SAACG,GACvBH,EAASG,EAAMC,OAAOL,UAanBD,GAAS,uBAAKG,UAAU,SAASH,KCUxC,EAvB0B,SAAC,GAIpB,IAHLO,EAGI,EAHJA,aACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,oBAEA,OACE,uBAAKN,UAAU,WACb,uBAAKA,UAAU,eAAf,gCAGA,uBAAKA,UAAU,SCjBiB,SAACI,EAAcC,EAAiBC,EAAqBC,GACzF,IAAIC,EAAiB,EAErB,IAAKD,GAAUH,GAAgB,IAE3BI,EADEF,EAAsB,IACP,GAEsB,IAAtBA,OAEd,GAAIF,GAAgB,IAEvBI,EADEF,EAAsB,IACN,IACTA,EAAsB,GACb,GAAK,IAAsC,KAA5BA,EAAsB,IAEhB,IAAtBA,MAEd,MAAIF,GAAgB,MASzB,MAAO,iDAPLI,EADEF,EAAsB,IACN,IACTA,EAAsB,GACb,GAAK,IAAsC,KAA5BA,EAAsB,IAEhB,IAAtBA,EAOrB,MAAM,OAAQG,eADED,EAAiBH,EAAmB,KACpD,KDZOK,CAAuBN,EAAcC,EAAiBC,MEkC/D,EA7CmB,WACjB,OAAwCK,cAAS,IAA1CP,EAAP,KAAqBQ,EAArB,KACA,GAA8CD,cAAS,IAAhDN,EAAP,KAAwBQ,EAAxB,KACA,GAAsDF,cAAS,IAAxDL,EAAP,KAA4BQ,EAA5B,KAEMC,EAAW,SAACjB,GAChB,GAAIA,GAASkB,MAAMC,OAAOnB,IACxB,MAAO,mCAIX,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKH,MAAM,6EACX,wCACA,gBAAC,EAAD,CACES,aAAcA,EACdC,gBAAiBA,EACjBC,oBAAqBA,IAEvB,gBAAC,EAAD,CACEX,MAAM,oBACNC,YAAY,sBACZC,MAAOkB,EAASX,GAChBN,MAAOM,EACPL,SAAUa,IAEZ,gBAAC,EAAD,CACEjB,MAAM,aACNC,YAAY,sBACZC,MAAOkB,EAASV,GAChBP,MAAOO,EACPN,SAAUc,IAEZ,gBAAC,EAAD,CACElB,MAAM,oBACNC,YAAY,cACZC,MAAOkB,EAAST,GAChBR,MAAOQ,EACPP,SAAUe","file":"component---src-pages-kalkulator-js-c0c5b79ca87fb1225a8b.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport \"./styles/textField.css\"\n\nconst TextField = ({ title, placeholder, error, value, onChange }) => {\n  const onChangeHandler = (event) => {\n    onChange(event.target.value)\n  }\n\n  return (\n    <>\n      <div className=\"title\">{title}</div>\n      <input\n        className={error ? \"input-error\" : \"input\"}\n        type=\"text\"\n        placeholder={placeholder}\n        value={value}\n        onChange={onChangeHandler}\n      />\n      {error && <div className=\"error\">{error}</div>}\n    </>\n  )\n}\n\nTextField.propTypes = {\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  error: PropTypes.string\n}\n\nexport default TextField","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { calculateSubsidyAmount } from \"../helpers/subsidy\"\n\nimport \"./styles/calculationResult.css\"\n\nconst CalculationResult = ({\n  creditAmount,\n  outstandingDebt,\n  daysOfSubsidisation\n}) => {\n  return (\n    <div className=\"wrapper\">\n      <div className=\"description\">\n        Jumlah subsidi bunga/margin:\n      </div>\n      <div className=\"total\">\n        {calculateSubsidyAmount(creditAmount, outstandingDebt, daysOfSubsidisation)}\n      </div>\n    </div>\n  )\n}\n\nCalculationResult.propTypes = {\n  creditAmount: PropTypes.string.isRequired,\n  outstandingDebt: PropTypes.string.isRequired,\n  daysOfSubsidisation: PropTypes.string.isRequired,\n}\n\nexport default CalculationResult","export const calculateSubsidyAmount = (creditAmount, outstandingDebt, daysOfSubsidisation, isBank) => {\n  let daysPercentage = 0;\n\n  if (!isBank && creditAmount <= 10000000) {\n    if (daysOfSubsidisation > 180) {\n      daysPercentage = 180 * 0.25\n    } else {\n      daysPercentage = daysOfSubsidisation * 0.25\n    }\n  } else if (creditAmount <= 500000000) {\n    if (daysOfSubsidisation > 180) {\n      daysPercentage = (90 * 0.06) + (90 * 0.03)\n    } else if (daysOfSubsidisation > 90) {\n      daysPercentage = (90 * 0.06) + ((daysOfSubsidisation - 90) * 0.03)\n    } else {\n      daysPercentage = daysOfSubsidisation * 0.06\n    }\n  } else if (creditAmount <= 10000000000) {\n    if (daysOfSubsidisation > 180) {\n      daysPercentage = (90 * 0.03) + (90 * 0.02)\n    } else if (daysOfSubsidisation > 90) {\n      daysPercentage = (90 * 0.03) + ((daysOfSubsidisation - 90) * 0.02)\n    } else {\n      daysPercentage = daysOfSubsidisation * 0.03\n    }\n  } else {\n    return \"Plafon pembiayaan melebihi batas Rp. 10 miliar\"\n  }\n\n  const result = (daysPercentage * outstandingDebt) / 360\n  return `Rp. ${formatCurrency(result)},-`\n}","import React, { useState } from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport TextField from \"../components/textField\"\nimport CalculationResult from \"../components/calculationResult\"\n\nconst Calculator = () => {\n  const [creditAmount, setCreditAmount] = useState(\"\")\n  const [outstandingDebt, setOutstandingDebt] = useState(\"\")\n  const [daysOfSubsidisation, setDaysOfSubsidisation] = useState(\"\")\n\n  const validate = (value) => {\n    if (value && isNaN(Number(value))) {\n      return \"Input harus dalam bentuk angka!\"\n    }\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Kalkulator besaran subsidi bunga/margin Usaha Mikro, Kecil, dan Menengah\" />\n      <h1>Kalkulator</h1>\n      <CalculationResult\n        creditAmount={creditAmount}\n        outstandingDebt={outstandingDebt}\n        daysOfSubsidisation={daysOfSubsidisation}\n      />\n      <TextField\n        title=\"Plafon Pembiayaan\"\n        placeholder=\"Dalam jumlah rupiah\"\n        error={validate(creditAmount)}\n        value={creditAmount}\n        onChange={setCreditAmount}\n      />\n      <TextField\n        title=\"Baki Debet\"\n        placeholder=\"Dalam jumlah rupiah\"\n        error={validate(outstandingDebt)}\n        value={outstandingDebt}\n        onChange={setOutstandingDebt}\n      />\n      <TextField\n        title=\"Hari Bunga/Margin\"\n        placeholder=\"Dalam angka\"\n        error={validate(daysOfSubsidisation)}\n        value={daysOfSubsidisation}\n        onChange={setDaysOfSubsidisation}\n      />\n    </Layout>\n  )\n}\n\nexport default Calculator\n"],"sourceRoot":""}